{"version":3,"sources":["components/List.js","components/Input.js","pages/TodoList.js","index.js"],"names":["List","this","props","arr1","length","renderTodos","arr2","style","color","Component","Input","htmlFor","id","ref","inp","input","value","inpValue","type","onChange","handleChange","onClick","addTodo","TodoList","e","setState","target","state","todos","title","done","delTodo","idx","filter","item","index","toggle","newTodos","JSON","parse","stringify","map","todo","checked","dangerouslySetInnerHTML","__html","localStorage","getItem","setItem","className","componentDidUpdate","ReactDOM","render","document","getElementById"],"mappings":"6KAiBeA,E,uKAbP,OAAO,4BACH,uDAASC,KAAKC,MAAMC,KAAKC,QACzB,4BACKH,KAAKC,MAAMG,aAAY,IAE5B,uDAASJ,KAAKC,MAAMI,KAAKF,QACzB,wBAAIG,MAAO,CAACC,MAAgB,UACvBP,KAAKC,MAAMG,aAAY,S,GATrBI,aCgBJC,E,uKAfF,IAAD,OACJ,OAAO,6BACH,2BAAOC,QAAQ,OAAf,YACA,2BACIC,GAAG,MACHC,IAAM,SAAAC,GAAG,OAAE,EAAKC,MAAQD,GACxBE,MAAOf,KAAKC,MAAMe,SAClBC,KAAK,OACLC,SAAUlB,KAAKC,MAAMkB,eAEzB,4BAAQC,QAASpB,KAAKC,MAAMoB,SAA5B,qB,GAXQb,aCuFLc,E,kDAnFX,aAAc,IAAD,8BACT,gBAMJH,aAAe,SAACI,GACZ,EAAKC,SAAS,CAACR,SAASO,EAAEE,OAAOV,SARxB,EAwBbM,QAAU,WACkB,IAArB,EAAKK,MAAMV,WAGd,EAAKQ,SAAS,CACVG,MAAM,CACF,CACIC,MAAO,EAAKF,MAAMV,SAClBa,MAAM,IAHT,mBAKE,EAAKH,MAAMC,UAGtB,EAAKH,SAAS,CAACR,SAAS,OArCf,EAuCbc,QAAU,SAACC,GACP,EAAKP,SAAS,CACVG,MAAO,EAAKD,MAAMC,MAAMK,QAAO,SAACC,EAAKC,GAAN,OAAcA,GAAOH,QAzC/C,EA4CbI,OAAS,SAACD,GACN,IAAIE,EAAWC,KAAKC,MAAMD,KAAKE,UAAU,EAAKb,MAAMC,QACpDS,EAASF,GAAOL,MAAQO,EAASF,GAAOL,KACxC,EAAKL,SAAS,CACVG,MAAOS,KAhDF,EAmDbhC,YAAc,SAACyB,GACX,OAAO,EAAKH,MAAMC,MAAMa,KAAI,SAACC,EAAKV,GAC9B,GAAGF,GAAMY,EAAKZ,KACV,OAAO,4BACH,2BACIT,QAAS,kBAAI,EAAKe,OAAOJ,IACzBW,QAASb,EACTZ,KAAK,aAET,0BAAM0B,wBAAyB,CAACC,OAAOH,EAAKb,SAC5C,4BACIR,QAAS,kBAAI,EAAKU,QAAQC,KAD9B,qBA3DZ,EAAKL,MAAQ,CACTV,SAAU,GACVW,MAAM,IAJD,E,gEAWT,IAAIA,EAAQkB,aAAaC,QAAQ,SAC9BnB,GACC3B,KAAKwB,SAAS,CACVG,MAAOU,KAAKC,MAAMX,O,2CAK1BkB,aAAaE,QACT,QACAV,KAAKE,UAAUvC,KAAK0B,MAAMC,U,+BAiDxB,IAAD,EACoB3B,KAAK0B,MAAvBC,EADF,EACEA,MACHzB,GAFC,EACQc,SACFW,EAAMK,QAAQ,SAAAC,GAAI,OAAKA,EAAKJ,SACnCxB,EAAOsB,EAAMK,QAAQ,SAAAC,GAAI,OAAIA,EAAKJ,QACtC,OACI,yBAAKmB,UAAU,OACX,kBAAC,EAAD,CAAO3B,QAASrB,KAAKqB,QAASS,QAAS9B,KAAK8B,QAASX,aAAcnB,KAAKmB,eACxE,kBAAC,EAAD,CAAME,QAASrB,KAAKqB,QAASS,QAAS9B,KAAK8B,QAAU1B,YAAaJ,KAAKI,YAAa6C,mBAAoBjD,KAAKiD,mBAAoB9B,aAAcnB,KAAKmB,aAAcjB,KAAMA,EAAMG,KAAMA,S,GA9E7KG,aCDvB0C,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.c3c32ebc.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\n\r\nclass List extends Component {   \r\n    render(){\r\n        return <ul>     \r\n            <h2>正在进行{this.props.arr1.length}</h2>\r\n            <ul>\r\n                {this.props.renderTodos(false)}\r\n            </ul>\r\n            <h2>已经完成{this.props.arr2.length}</h2>\r\n            <ul style={{color:3<2?'red':'green'}}>\r\n                {this.props.renderTodos(true)}\r\n            </ul>      \r\n        </ul>\r\n    }    \r\n}\r\n\r\nexport default List;","import React,{Component} from 'react';\r\n\r\nclass Input extends Component {\r\n    render(){\r\n        return <div>\r\n            <label htmlFor=\"inp\">todolist</label>\r\n            <input \r\n                id='inp'\r\n                ref ={inp=>this.input = inp}\r\n                value={this.props.inpValue} \r\n                type=\"text\" \r\n                onChange={this.props.handleChange}\r\n            ></input>    \r\n            <button onClick={this.props.addTodo}>添加</button>     \r\n        </div>\r\n    }   \r\n}\r\n\r\nexport default Input;","import React, { Component } from 'react'\r\nimport List from '../components/List';\r\nimport Input from '../components/Input';\r\n\r\n\r\nclass TodoList extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            inpValue: '',\r\n            todos:[]\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({inpValue:e.target.value})\r\n    }\r\n    componentDidMount(){\r\n        let todos = localStorage.getItem('todos');\r\n        if(todos){\r\n            this.setState({\r\n                todos: JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n    componentDidUpdate(){\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n        )\r\n    }\r\n    addTodo = ()=>{\r\n        if(this.state.inpValue==''){\r\n            return;\r\n        }           \r\n        this.setState({\r\n            todos: [\r\n                {\r\n                    title: this.state.inpValue,\r\n                    done: false\r\n                },\r\n                ...this.state.todos\r\n            ]\r\n        })       \r\n        this.setState({inpValue:\"\"});       \r\n    }\r\n    delTodo = (idx)=>{\r\n        this.setState({\r\n            todos: this.state.todos.filter((item,index)=>index!=idx)\r\n        });       \r\n    }\r\n    toggle = (index)=>{\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos));\r\n        newTodos[index].done = !newTodos[index].done;\r\n        this.setState({\r\n            todos: newTodos\r\n        })\r\n    }\r\n    renderTodos = (done)=>{\r\n        return this.state.todos.map((todo,idx)=>{\r\n            if(done==todo.done){\r\n                return <li>\r\n                    <input \r\n                        onClick={()=>this.toggle(idx)}\r\n                        checked={done} \r\n                        type=\"checkbox\"\r\n                    />\r\n                    <span dangerouslySetInnerHTML={{__html:todo.title}}></span>\r\n                    <button \r\n                        onClick={()=>this.delTodo(idx)}\r\n                    >\r\n                        删除\r\n                    </button>\r\n                </li>\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n        const {todos,inpValue} = this.state;\r\n        let arr1 = todos.filter( item => !item.done);\r\n        let arr2 = todos.filter( item => item.done)\r\n        return (           \r\n            <div className=\"box\">\r\n                <Input addTodo={this.addTodo} delTodo={this.delTodo} handleChange={this.handleChange}/>\r\n                <List addTodo={this.addTodo} delTodo={this.delTodo}  renderTodos={this.renderTodos} componentDidUpdate={this.componentDidUpdate} handleChange={this.handleChange} arr1={arr1} arr2={arr2}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport TodoList from './pages/TodoList';\r\n\r\nReactDOM.render(\r\n  <TodoList/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n// import {Home} from './pages/Home';\r\n// import Control from './components/Control';\r\n//import Buttons from './components/Buttons';\r\n// import Demo01 from './pages/Demo01';\r\n// import App from './pages/App';\r\n// import Hoc,{ Detail } from './pages/Hoc';\r\n// import Hook from './pages/Hook';\r\n// import Context from './pages/Context';\r\n\r\n// console.log(Context);\r\n\r\n// ReactDOM.render(\r\n//   // <div><Hoc/><Detail/></div>,\r\n//   <Context.Provider value='123'>\r\n//   <Hook/>\r\n//   document.getElementById('root')\r\n// );\r\n\r\n\r\n\r\n\r\n/* // ReactDOM.render(\r\n//   // ele,\r\n//   // <App title='abc' id=\"app\"/>,\r\n//   // <Demo/>,\r\n//   // <div/>,\r\n//   //<Home data='abc'/>,\r\n//   // <Demo01 name='lily'/>,\r\n//   <App/>,\r\n//   // <Control/>,\r\n//   document.getElementById('root')\r\n// );\r\n//import $ from 'jquery';\r\n// import $ from 'jquery';\r\n// console.log($);\r\n//ctrl+shift+l选中所有相同单词\r\n//ctrl+shift+左右键  选中光标左边或者右边单词\r\n//ctrl+d 删除整行\r\n// alt shift + 上下键   复制一行\r\n// alt + 上下键         移动一行\r\n// let List = (props)=>{\r\n//   return <ul> */\r\n/* </Context.Provider>//     { */\r\n/* //       props.data.map(\r\n//         (item)=><li key={item.id}>{item.title}</li>\r\n//         )\r\n//     }\r\n//   </ul>\r\n// } */\r\n\r\n/* // const Buttons =()=>{ */\r\n/* //   // const btns=[1,2,3,4,5];\r\n//   const handleClick = (num)=>{ */\r\n/* //     //第一个参数，事件对象\r\n//     console.log(num);\r\n//   }\r\n// //   return <div>\r\n//     { */\r\n/* //       // btns.map((item)=>(\r\n//       // <button */\r\n/* //       //  key={item}\r\n//       //  onClick={()=>handleClick(item)}\r\n//       //  >\r\n//       //    {item}\r\n//       // </button> */\r\n/* //       // ))\r\n//     }\r\n//   </div>\r\n// } */\r\n\r\n\r\n/* // class Home extends React.Component{//声明类组件 */\r\n/* //   constructor(){\r\n//     super();\r\n//     //super(props);在构造函数中拿属性时加参数，大部分时候不写\r\n//     this.state={\r\n//       data:[]\r\n//     }\r\n//   }\r\n    \r\n//     //在render之后执行，该拿到setState一更新后render重新执行一次\r\n//     componentDidMount(){\r\n//       fetch('https://cnodejs.org/api/v1/topics')\r\n//       .then(res=>res.json())\r\n//       .then(({data})=>{\r\n//        this.setState({data})\r\n//       })\r\n//    }\r\n\r\n//   //  handleClick=()=>{//类中点击事件  默认不会绑定this(可以bind绑定)\r\n//   //    console.log(this);\r\n//   //  }\r\n// //在render完全更新好了后会有componentDidUpdate()\r\n    \r\n//     // setTimeout(()=>{\r\n//     //   this.setState({data:[5,6,7,8]})\r\n//     // },1000)\r\n//     // }\r\n//   getData=(page)=>{\r\n//         fetch('https://cnodejs.org/api/v1/topics?page='+page)\r\n//         .then(res=>res.json())\r\n//         .then(({data})=>{\r\n//          this.setState({data})\r\n//         })\r\n//       }\r\n//       //console.log(page);\r\n    \r\n  \r\n//   render(){//类组件唯一必须的方法\r\n//     const{data}=this.state;\r\n//     // return <ul>\r\n//     //   {\r\n//     //       data.map(\r\n//     //       (item)=><li>{item.title}</li>\r\n//     //     )\r\n//     //   }\r\n//     // </ul>\r\n//     const btns=[1,2,3,4,5];\r\n//     return <div>\r\n      \r\n//       {/* <button onClick={this.handleClick}>click</button>\r\n\r\n//       <Buttons /> */\r\n/* //</Context.Provider>//         btns.map((item)=>( */\r\n//         <button\r\n//         key={item}\r\n//         onClick={()=>this.getData(item)}>\r\n//           {item}\r\n//         </button> */\r\n/* //       ))\r\n//       }\r\n      \r\n//       <List data = {data}/>\r\n//     </div>\r\n   \r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//组件声明  (分为函数组件和类组件)\r\n//函数组件（常用于展示，功能不足）\r\n//功能：UI（展示）组件，木偶组件（传入什么就展示什么）\r\n// function App(props){//参数是一个对象\r\n//   const{title,id}=props;\r\n//   return <div>\r\n//     <h1>app组件内容</h1>\r\n//     <div>{title}</div>\r\n//     <div>{id}</div>\r\n//   </div>\r\n// }\r\n\r\n// //智能组件\r\n// class Demo extends React.Component{//Component是组件意思\r\n//   constructor(){\r\n//     super();\r\n//     //声明状态\r\n//     this.state = {\r\n//       //name:'tom'\r\n//       name:new Date().toLocaleString(),\r\n//     }\r\n//     //改状态\r\n//     setTimeout(()=>{\r\n//       //this.setState({name:\"jery\"})\r\n//       this.setState({name:new Date().toLocaleString()});\r\n//     },1000)\r\n//   }\r\n//   render(){\r\n//     // return<ul>                    ////后续代码没跟上的\r\n//     //   {\r\n//     //     this state.data.map(\r\n//     //       (item)=><li>{item}</li>\r\n//     //     )\r\n//     //   }\r\n//    // </ul>\r\n//     return <div>\r\n//       <div>name:{this.state.name}</div>\r\n//       <App title={this.state.name} id='app'/>\r\n//       {/* <App title='任意值' id='app'/>\r\n//       <App title='任意值' id='app'/>\r\n //     </div> */\r\n//   }\r\n// }\r\n\r\n// ReactDOM.render(\r\n//   //ele,\r\n//   //<App title='任意值' id='app'/>,//函数组件\r\n//   <Demo title='任意值' id='app'/>,//类组件\r\n//   document.getElementById('root')\r\n// ); */}\r\n\r\n// // let ele =  <h1 id=\"title\" className=\"tit\">\r\n// //   {/* <div id=\"div1\">hello</div>\r\n// //    react\r\n// //    <div>hello</div>\r\n// //    <div>{['hello','world']}</div>*/}\r\n// //    <div>当前时间</div>\r\n// //    {new DataCue().toLocalestring()}\r\n// // </h1>;\r\n\r\n\r\n// //let ele = React.createElement(\r\n//  // \"h1\",\r\n//  // {id:\"title\"},\r\n//  // React.createElement(\"div\",{id:\"div1\"},\"hello\")\r\n//  // )\r\n\r\n\r\n//  //将JSX对象渲染到\r\n// // let ReactDOM ={\r\n// //   render(eleObj,container){\r\n// //     //解构\r\n// //     const {type,props}=eleObj;\r\n// //     //创建第一层节点\r\n// //    let ele = document.createElement(type);\r\n// //    //遍历属性对象将属性添加到第一层节点对象上\r\n// //     for(const prop in props){\r\n// //       if(prop == \"children\"){\r\n// //         if(typeof props.children == 'string'){\r\n// //           const txtNode = document.createTextNode(props.children);\r\n// //           ele.appendChild(txtNode);\r\n// //           break;\r\n// //         }\r\n// //         //将第一层节点对象的子元素添加进去\r\n// //         props.children.forEach(child=>{//至于一个对象child外面的括号可以不要\r\n// //           if(typeof child == \"string\"){\r\n// //             const txtNode = document.createTextNode(child);\r\n// //             ele.appendChild(txtNode);\r\n// //           }else{\r\n// //             ReactDOM.render(child,ele);\r\n// //           }\r\n// //         })\r\n// //       }else{\r\n// //         ele[prop]=props[prop];\r\n// //       }\r\n\r\n// //     }\r\n// //     //将第一层DOM节点添加到container中\r\n// //     container.appendChild(ele);\r\n\r\n// //   }\r\n// // }\r\n\r\n\r\n// /*\r\n// 1.原生JS，DOM操作（JQ）\r\n// 2.React:开发效率高，性能高（不卡死），\r\n// 3.环境搭建，创建一个项目，运行\r\n// 4.JSX语法\r\n\r\n// */\r\n\r\n// // If you want your app to work offline and load faster, you can change\r\n// // unregister() to register() below. Note this comes with some pitfalls.\r\n// // Learn more about service workers: https://bit.ly/CRA-PWA */}\r\n"],"sourceRoot":""}